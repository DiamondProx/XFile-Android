package com.huangjiang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DLINK_DETAIL".
 */
public class LinkDetailDao extends BaseDao<LinkDetail, Long> {

    public static final String TABLENAME = "DLINK_DETAIL";

    /**
     * Properties of entity LinkDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Count = new Property(2, Integer.class, "count", false, "COUNT");
    }

    ;


    public LinkDetailDao(DaoConfig config) {
        super(config);
    }

    public LinkDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"DLINK_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"COUNT\" INTEGER);"); // 2: createTime
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DLINK_DETAIL\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, LinkDetail entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }

        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(3, count);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public LinkDetail readEntity(Cursor cursor, int offset) {
        LinkDetail entity = new LinkDetail( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // count
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, LinkDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(LinkDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(LinkDetail entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 累计一次连接
     */
    public void addCount(String deviceId) {
        List<LinkDetail> list = queryBuilder().where(Properties.DeviceId.eq(deviceId)).list();
        if (list != null && list.size() > 0) {
            LinkDetail dLinkDetail = list.get(0);
            dLinkDetail.setCount(dLinkDetail.getCount() + 1);
            update(dLinkDetail);
        } else {
            LinkDetail dLinkDetail = new LinkDetail();
            dLinkDetail.setDeviceId(deviceId);
            dLinkDetail.setCount(1);
            insert(dLinkDetail);
        }
    }

    /**
     * 获取人次
     */
    public int getDeviceCount() {
        Cursor cursor = sqlQuery("select count(DEVICE_ID) from " + TABLENAME, null);
        if (cursor != null && cursor.moveToNext()) {
            int deviceCount = cursor.getInt(0);
            cursor.close();
            return deviceCount;
        }
        return 0;
    }

    /**
     * 获取次数
     */
    public int getConnectCount() {
        Cursor cursor = sqlQuery("select SUM(COUNT) from " + TABLENAME, null);
        if (cursor != null && cursor.moveToNext()) {
            int connectCount = cursor.getInt(0);
            cursor.close();
            return connectCount;
        }
        return 0;
    }


}
