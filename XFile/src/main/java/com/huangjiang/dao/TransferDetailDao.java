package com.huangjiang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DTRANSFER_DETAIL".
 */
public class TransferDetailDao extends BaseDao<TransferDetail, Long> {

    public static final String TABLENAME = "DTRANSFER_DETAIL";

    /**
     * Properties of entity TransferDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TotalSize = new Property(1, Long.class, "totalSize", false, "TOTAL_SIZE");
    }

    ;


    public TransferDetailDao(DaoConfig config) {
        super(config);
    }

    public TransferDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"DTRANSFER_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TOTAL_SIZE\" INTEGER);"); // 1: totalSize
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DTRANSFER_DETAIL\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransferDetail entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(2, totalSize);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public TransferDetail readEntity(Cursor cursor, int offset) {
        TransferDetail entity = new TransferDetail( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // totalSize
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, TransferDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotalSize(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(TransferDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(TransferDetail entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 添加累计传输文件大小
     */
    public void addTotalSize(long size) {
        List<TransferDetail> list = queryBuilder().list();
        if (list != null && list.size() > 0) {
            TransferDetail dTransferDetail = list.get(0);
            dTransferDetail.setTotalSize(dTransferDetail.getTotalSize() + size);
            update(dTransferDetail);
        } else {
            TransferDetail dTransferDetail = new TransferDetail();
            dTransferDetail.setTotalSize(size);
            insert(dTransferDetail);
        }
    }


    /**
     * 读取累计文件传输大小
     */
    public int getTotalSize() {
        Cursor cursor = sqlQuery("select sum(TOTAL_SIZE) from " + TABLENAME, null);
        if (cursor != null && cursor.moveToNext()) {
            int deviceCount = cursor.getInt(0);
            cursor.close();
            return deviceCount;
        }
        return 0;
    }

}
